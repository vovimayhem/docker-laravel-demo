# https://blog.zhaw.ch/icclab/process-management-in-docker-containers/

[supervisord]
# Start supervisord in the foreground:
nodaemon=true

# Route the supervisord log output to stdout:
logfile=/dev/null
logfile_maxbytes=0

# Set the pidfile path to somewhere 'www-data' can write to:
pidfile=/srv/demo/tmp/pids/supervisord.pid

[program:nginx]
command=nginx -c /tmp/nginx.conf
startretries=0
autorestart=false
numprocs=1
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/1
stderr_logfile_maxbytes=0

# We'll need to exit supervisord if any of our child processes unexpectedly
# exits, so the orchestrator (docker swarm, K8 or heroku) can re-schedule
# another container:
[eventlistener:nginx_exit]
command=/srv/demo/bin/kill_supervisor.py
process_name=nginx
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/1
stderr_logfile_maxbytes=0
events=PROCESS_STATE_STOPPING,PROCESS_STATE_EXITED,PROCESS_STATE_STOPPED,PROCESS_STATE_FATAL,PROCESS_STATE_UNKNOWN
# Test it runing  `kill -QUIT $(cat /usr/src/tmp/pids/nginx.pid) -l 1`

[program:php_fpm]
command=php-fpm --fpm-config /tmp/php-fpm.conf
pidfile=/srv/demo/tmp/pids/php-fpm.pid
startretries=0
autorestart=false
numprocs=1
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/1
stderr_logfile_maxbytes=0


[eventlistener:php_fpm_exit]
command=/srv/demo/bin/kill_supervisor.py
process_name=php_fpm
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/1
stderr_logfile_maxbytes=0
events=PROCESS_STATE_STOPPING,PROCESS_STATE_EXITED,PROCESS_STATE_STOPPED,PROCESS_STATE_FATAL,PROCESS_STATE_UNKNOWN
# Test it runing `kill -QUIT $(cat /usr/src/tmp/pids/php-fpm.pid) -l 1`
